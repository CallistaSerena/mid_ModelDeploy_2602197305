# -*- coding: utf-8 -*-
"""oop_mid_2602197305.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hVFt6DfalnZBVtry1xHKx9wdC-8PHlLT

Name: Callista Serena Ekaputri

NIM: 2602197305

Class: LC09
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn import set_config
set_config(print_changed_only = False)

from sklearn.ensemble import RandomForestClassifier
import warnings
warnings.filterwarnings('ignore')
from sklearn.metrics import classification_report, accuracy_score

import pickle

class DataHandler:
  def __init__(self, filePath):
    self.filePath = filePath
    self.data = None
    self.input_df = None
    self.output_df = None
  def load_data(self):
    self.data = pd.read_csv(self.filePath)
  def create_input_output(self, target_column):
    self.input_df = self.data.drop(target_column, axis = 1)
    self.output_df = self.data[target_column]

class ModelHandler:
  def __init__(self, input_data, output_data):
    self.input_data = input_data
    self.output_data = output_data
    self.createModel()
    self.x_train, self.x_test, self.y_train, self.y_test, self.y_predict = [None] * 5

  def createMeanFromColumn(self, kolom):
    return np.mean(self.x_train[kolom])

  def fillingNAWithNumbers(self, columns, number):
    self.x_train[columns].fillna(number, inplace = True)
    self.x_test[columns].fillna(number, inplace = True)

  def encoding(self, kolom):
    labels = LabelEncoder()
    self.x_train[kolom] = labels.fit_transform(self.x_train[kolom])
    self.x_test[kolom] = labels.fit_transform(self.x_test[kolom])

  def dropValues(self, kolom):
    self.x_train.drop(kolom, axis = 1, inplace = True)
    self.x_test.drop(kolom, axis = 1, inplace = True)

  def split_data(self, test_size = 0.2, random_state = 42):
    self.x_train, self.x_test, self.y_train, self.y_test = train_test_split(
        self.input_data, self.output_data, test_size = test_size, random_state = random_state)

  def createModel(self):
    self.model = RandomForestClassifier()

  def train_model(self):
    self.model.fit(self.x_train, self.y_train)

  def makePrediction(self):
    self.y_predict = self.model.predict(self.x_test)

  def evaluate_model(self):
    predictions = self.model.predict(self.x_test)
    print("Classification Report")
    print(classification_report(self.y_test, self.y_predict))
    print(accuracy_score(self.y_test, self.y_predict))

  def save_model_to_file(self, filename):
    with open(filename, 'wb') as file:
      pickle.dump(self.model, file)

filePath = 'data_B.csv'
data_handler = DataHandler(filePath)
data_handler.load_data()
data_handler.create_input_output('churn')
input_df = data_handler.input_df
output_df = data_handler.output_df

model_handler = ModelHandler(input_df, output_df)
model_handler.split_data()
model_handler.encoding('Geography')
model_handler.encoding('Gender')
model_handler.dropValues('id')
model_handler.dropValues('CustomerId')
model_handler.dropValues('Surname')
CreditScore_replace = model_handler.createMeanFromColumn('CreditScore')
model_handler.fillingNAWithNumbers('CreditScore', CreditScore_replace)

model_handler.train_model()

model_handler.makePrediction()

model_handler.evaluate_model()

model_handler.save_model_to_file('mid_modelDeployment_2602197305.pkl')

